{"version":3,"sources":["components/HomePage/HomePage.module.css","components/Contacts/Contacts.js","components/HomePage/HomePage.js","components/Header/Header.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Contacts","className","Component","HomePage","styles","homePage","text","Header","useState","isOpen","setIsOpen","color","dark","expand","to","onClick","id","navbar","left","active","Routes","exact","path","render","props","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,KAAO,yB,kOCClDC,EAAb,iLAEQ,OACI,0BAAMC,UAAU,aAAhB,gBAHZ,GAA8BC,a,iBCCjBC,EAAb,iLAEQ,OACI,yBAAMF,UAAS,oBAAeG,IAAOC,WACjC,wBAAIJ,UAAS,oBAAeG,IAAOE,OAAnC,6FAGA,uBAAGL,UAAU,aAAb,0CAPhB,GAA8BC,a,eCQjBK,EAAS,WAAO,IAAD,EACIC,oBAAS,GADb,mBACjBC,EADiB,KACTC,EADS,KAOxB,OACI,yBAAKT,UAAU,WACX,kBAAC,IAAD,CAAWU,MAAM,SAASC,MAAI,EAACC,OAAO,KAAKZ,UAAU,aACjD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAYa,GAAG,KAAI,4BAAQb,UAAU,cACjC,uBAAGA,UAAU,mBAIrB,kBAAC,IAAD,CAAkBc,QAbP,WACnBL,GAAWD,MAaH,kBAAC,IAAD,CAAaO,GAAG,kBAAkBP,OAAQA,EAAQQ,QAAM,GACpD,kBAAC,IAAD,CAAcC,MAAI,GACd,kBAAC,IAAD,CAAYC,QAAM,GACd,kBAAC,IAAD,CAAYL,GAAG,KAAf,SAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAYA,GAAG,aAAf,kBCTbM,MAnBf,WACI,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,OAAK,EAACC,KAAK,IACXC,OAAQ,SAACC,GAAD,OAAW,kBAAC,EAAaA,MAErC,kBAAC,IAAD,CACIF,KAAK,YACLC,OAAQ,SAACC,GAAD,OAAW,kBAAC,EAAaA,SCFtCC,MAVf,WACE,OACE,6BACI,kBAAC,IAAD,KACI,kBAAC,EAAD,SCGQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAAO,kBAAC,EAAD,MAASS,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.02484b71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"homePage\":\"HomePage_homePage__2JqhH\",\"text\":\"HomePage_text__1d6Tq\"};","import React, { Component } from 'react';\n\nexport class Contacts extends Component {\n    render() {\n        return (\n            <main className='container'>\n                Contacts\n            </main>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport styles from  './HomePage.module.css';\n\nexport class HomePage extends Component {\n    render() {\n        return (\n            <div  className={`container ${styles.homePage}`}>\n                <h4 className={`text-dark ${styles.text}`}>\n                    My Portfolio Page is being re-developed and to be uploaded within the next couple of days\n                </h4>\n                <p className='text-dark'>My apologises for inconveniences </p>\n            </div>\n        );\n    }\n}","import React, { useState } from \"react\";\nimport {\n    MDBCollapse,\n    MDBNavbar,\n    MDBNavbarBrand,\n    MDBNavbarNav,\n    MDBNavbarToggler,\n    MDBNavItem,\n    MDBNavLink,\n} from \"mdbreact\";\n\nexport const Header = () => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggleCollapse = () => {\n        setIsOpen(!isOpen);\n    };\n\n    return (\n        <div className='bg-dark'>\n            <MDBNavbar color='indigo' dark expand='md' className='container'>\n                <MDBNavbarBrand>\n                    <MDBNavLink to='/'><strong className='text-white'>\n                        <i className=\"fas fa-code\"></i>\n                    </strong>\n                    </MDBNavLink>\n                </MDBNavbarBrand>\n                <MDBNavbarToggler onClick={toggleCollapse}/>\n                <MDBCollapse id='navbarCollapse3' isOpen={isOpen} navbar>\n                    <MDBNavbarNav left>\n                        <MDBNavItem active>\n                            <MDBNavLink to='/'>Home</MDBNavLink>\n                        </MDBNavItem>\n                        <MDBNavItem>\n                            <MDBNavLink to='/contacts'>Contacts</MDBNavLink>\n                        </MDBNavItem>\n                    </MDBNavbarNav>\n                    {/*<MDBNavbarNav right>\n                        <MDBNavItem>\n\n                        </MDBNavItem>\n                    </MDBNavbarNav>*/}\n                </MDBCollapse>\n            </MDBNavbar>\n        </div>\n    );\n};\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Contacts } from \"./components/Contacts/Contacts\";\nimport { HomePage } from \"./components/HomePage/HomePage\";\nimport { Header } from \"./components/Header/Header\";\n\nfunction Routes() {\n    return (\n        <div>\n            <Header />\n            <Switch>\n                <Route\n                    exact path='/'\n                    render={(props) => <HomePage {...props} />}\n                />\n                <Route\n                    path='/contacts'\n                    render={(props) => <Contacts {...props} />}\n                />\n                {/*<Route path=\"*\"><PageNotFound/></Route>*/}\n            </Switch>\n        </div>\n    );\n}\n\nexport default Routes;","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport Routes from \"./Routes\";\n\nfunction App() {\n  return (\n    <div>\n        <BrowserRouter>\n            <Routes/>\n        </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}